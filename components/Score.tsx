// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { PlasmicScore, DefaultScoreProps } from "./plasmic/bolao/PlasmicScore";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { AdminResults, state, ViewResults } from "../state-management/app";
import { useSnapshot } from "valtio";
import { useRouter } from "next/router";
export interface ScoreProps extends DefaultScoreProps {}

function Score_(props: ScoreProps, ref: HTMLElementRefOf<"div">) {
  const viewCtx = React.useContext(ViewResults);
  const adminCtx = React.useContext(AdminResults);
  const matches = useSnapshot(state.matches);
  const router = useRouter();
  const isAdmin = router.pathname === "/admin";
  if (viewCtx) {
    const match = viewCtx.find(
      (match) => ( match.match_id === props.matchId )
    )!;
    return <PlasmicScore 
      root={{ ref }}
      {...props}
      homeScore={`${match ? (match.home_score ?? "") : ""}`}
      awayScore={`${match ? (match.away_score ?? "") : ""}`}
      hide={props.isOpen && state.logged_user_id !== 8 ? true : false}
      isOpen={false}
    />
  }
  if (adminCtx) {
    const match = adminCtx.matches.find(match => match.match_id === props.matchId)!;
    if (!match) return <></>;
    return <PlasmicScore 
      root={{ ref }}
      {...props}
      homeScore={`${match ? (match.home_score ?? "") : ""}`}
      homeScoreInput={{ 
        value: match.home_score,
        onChange: (e) => e && adminCtx.onChange(props.matchId!, +e.target.value, +match.away_score!)
      }}
      awayScore={`${match ? (match.away_score ?? "") : ""}`}
      awayScoreInput={{ 
        value: match.away_score,
        onChange: (e) => e && adminCtx.onChange(props.matchId!, +match.home_score!, +e.target.value)
      }}
      hide={props.isOpen && state.logged_user_id !== 8 && !isAdmin ? true : false}
      isOpen={isAdmin}
    />
  }

  const match = state.matches.find(match => match.match_id === props.matchId)!;
  const match2 = matches.find(match => match.match_id === props.matchId)!;
  console.log("dale23", match);
  return <PlasmicScore
    root={{ ref }} 
    {...props}
    homeScoreInput={{
      value: match2?.home_score,
      onChange: (e) => match.home_score = +e.target.value,
      type: "number"
    }}
    awayScoreInput={{
      value: match2?.away_score,
      onChange: (e) => match.away_score = +e.target.value,
      type: "number"
    }}
    homeScore={`${match2?.home_score ?? ""}`}
    awayScore={`${match2?.away_score ?? ""}`}
  />;
}

const Score = React.forwardRef(Score_);
export default Score;
