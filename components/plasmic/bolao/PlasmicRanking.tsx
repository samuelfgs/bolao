// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: r6sSLbmSTeVjqGUVythgwH
// Component: u2MWSbFe2Y
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: qQe6YhWQiQ/component
import { TableWrapper } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: kWbJIG4IgB/codeComponent
import { TableColumn } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: Mj3elNqVoI/codeComponent
import { TableValue } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: l40Ox6HDSg/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bolao.module.css"; // plasmic-import: r6sSLbmSTeVjqGUVythgwH/projectcss
import sty from "./PlasmicRanking.module.css"; // plasmic-import: u2MWSbFe2Y/css

export type PlasmicRanking__VariantMembers = {};

export type PlasmicRanking__VariantsArgs = {};
type VariantPropType = keyof PlasmicRanking__VariantsArgs;
export const PlasmicRanking__VariantProps = new Array<VariantPropType>();

export type PlasmicRanking__ArgsType = {
  isLoading?: boolean;
};

type ArgPropType = keyof PlasmicRanking__ArgsType;
export const PlasmicRanking__ArgProps = new Array<ArgPropType>("isLoading");

export type PlasmicRanking__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  antdTable?: p.Flex<typeof TableWrapper>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  antdTableValue2?: p.Flex<typeof TableValue>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultRankingProps {}

function PlasmicRanking__RenderFunc(props: {
  variants: PlasmicRanking__VariantsArgs;
  args: PlasmicRanking__ArgsType;
  overrides: PlasmicRanking__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isLoading: true
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__lTAo)}>
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header)}
              />
            </div>
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h9Omr
            )}
          >
            {"Ranking"}
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__nFas6)}>
              {(() => {
                try {
                  return !$props.isLoading;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <TableWrapper
                  data-plasmic-name={"antdTable"}
                  data-plasmic-override={overrides.antdTable}
                  className={classNames("__wab_instance", sty.antdTable)}
                  columns={
                    <React.Fragment>
                      <TableColumn
                        className={classNames(
                          "__wab_instance",
                          sty.antdTableColumn2__o2SpI
                        )}
                        columnTemplate={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hOWj
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iBdWh
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return $ctx.currentRow.pos;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        dataIndex={"" as const}
                        title={"#" as const}
                      />

                      <TableColumn
                        className={classNames(
                          "__wab_instance",
                          sty.antdTableColumn2__mdHnK
                        )}
                        columnTemplate={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <p.PlasmicLink
                                data-plasmic-name={"link"}
                                data-plasmic-override={overrides.link}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link
                                )}
                                component={Link}
                                href={(() => {
                                  try {
                                    return `visualizar/${$ctx.currentRow.id}`;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                platform={"nextjs"}
                              >
                                <TableValue
                                  data-plasmic-name={"antdTableValue2"}
                                  data-plasmic-override={
                                    overrides.antdTableValue2
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.antdTableValue2
                                  )}
                                />
                              </p.PlasmicLink>
                            )}
                          </ph.DataCtxReader>
                        }
                        dataIndex={"user" as const}
                        title={"Nome" as const}
                      />

                      <TableColumn
                        className={classNames(
                          "__wab_instance",
                          sty.antdTableColumn2__ax8P7
                        )}
                        columnTemplate={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hSs9
                                )}
                              >
                                <TableValue
                                  className={classNames(
                                    "__wab_instance",
                                    sty.antdTableValue2__rc9H4
                                  )}
                                />
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        dataIndex={"pts" as const}
                        title={"P" as const}
                      />

                      <TableColumn
                        className={classNames(
                          "__wab_instance",
                          sty.antdTableColumn2___4Pe7X
                        )}
                        columnTemplate={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cDfI0
                                )}
                              >
                                <TableValue
                                  className={classNames(
                                    "__wab_instance",
                                    sty.antdTableValue2__cJkaa
                                  )}
                                />
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        dataIndex={"j" as const}
                        title={"J" as const}
                      />

                      <TableColumn
                        className={classNames(
                          "__wab_instance",
                          sty.antdTableColumn2__ppbEu
                        )}
                        columnTemplate={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ibAOn
                                )}
                              >
                                <TableValue
                                  className={classNames(
                                    "__wab_instance",
                                    sty.antdTableValue2__rIhgG
                                  )}
                                />
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        dataIndex={"cravadas" as const}
                        title={"C" as const}
                      />

                      <TableColumn
                        className={classNames(
                          "__wab_instance",
                          sty.antdTableColumn2__lz3W2
                        )}
                        columnTemplate={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5Idpj
                                )}
                              >
                                <TableValue
                                  className={classNames(
                                    "__wab_instance",
                                    sty.antdTableValue2___01Khk
                                  )}
                                />
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        dataIndex={"vencedor" as const}
                        title={"V" as const}
                      />
                    </React.Fragment>
                  }
                  items={[
                    {
                      name: "John Brown",
                      age: 19,
                      address: "New York No. 1 Lake Park",
                      tags: ["student", "developer"]
                    },
                    {
                      name: "Jim Green",
                      age: 42,
                      address: "London No. 1 Lake Park",
                      tags: ["teacher"]
                    },
                    {
                      name: "Joe Black",
                      age: 32,
                      address: "Sidney No. 1 Lake Park",
                      tags: ["cool", "teacher"]
                    }
                  ]}
                  pagination={false}
                  scroll={{ x: true }}
                />
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $props.isLoading;
            } catch (e) {
              if (e instanceof TypeError) {
                return true;
              }
              throw e;
            }
          })() ? (
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/bolao/images/loadingIcongif.gif",
                fullWidth: 441,
                fullHeight: 291,
                aspectRatio: undefined
              }}
            />
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "antdTable", "link", "antdTableValue2", "img"],
  header: ["header"],
  antdTable: ["antdTable", "link", "antdTableValue2"],
  link: ["link", "antdTableValue2"],
  antdTableValue2: ["antdTableValue2"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  antdTable: typeof TableWrapper;
  link: "a";
  antdTableValue2: typeof TableValue;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRanking__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRanking__VariantsArgs;
    args?: PlasmicRanking__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRanking__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRanking__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRanking__ArgProps,
          internalVariantPropNames: PlasmicRanking__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRanking__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRanking";
  } else {
    func.displayName = `PlasmicRanking.${nodeName}`;
  }
  return func;
}

export const PlasmicRanking = Object.assign(
  // Top-level PlasmicRanking renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    antdTable: makeNodeComponent("antdTable"),
    link: makeNodeComponent("link"),
    antdTableValue2: makeNodeComponent("antdTableValue2"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicRanking
    internalVariantProps: PlasmicRanking__VariantProps,
    internalArgProps: PlasmicRanking__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRanking;
/* prettier-ignore-end */
