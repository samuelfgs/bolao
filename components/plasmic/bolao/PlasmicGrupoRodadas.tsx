// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: r6sSLbmSTeVjqGUVythgwH
// Component: 5XZgnc_Vja6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "../../../pages/plasmic-host"; // plasmic-import: 7dFnQyHCpn/codeComponent
import { DateText } from "../../../pages/plasmic-host"; // plasmic-import: HbwW1C7Fpl/codeComponent
import Outcome from "../../Outcome"; // plasmic-import: b5zZcZO5NB/component
import Score from "../../Score"; // plasmic-import: IMj4TUj-w8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bolao.module.css"; // plasmic-import: r6sSLbmSTeVjqGUVythgwH/projectcss
import sty from "./PlasmicGrupoRodadas.module.css"; // plasmic-import: 5XZgnc_Vja6/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _4_GqcBrJ/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: A1GodbM3-/icon

export type PlasmicGrupoRodadas__VariantMembers = {
  isFinished: "isFinished";
};

export type PlasmicGrupoRodadas__VariantsArgs = {
  isFinished?: SingleBooleanChoiceArg<"isFinished">;
};

type VariantPropType = keyof PlasmicGrupoRodadas__VariantsArgs;
export const PlasmicGrupoRodadas__VariantProps = new Array<VariantPropType>(
  "isFinished"
);

export type PlasmicGrupoRodadas__ArgsType = {
  currentGroup?: any;
};

type ArgPropType = keyof PlasmicGrupoRodadas__ArgsType;
export const PlasmicGrupoRodadas__ArgProps = new Array<ArgPropType>(
  "currentGroup"
);

export type PlasmicGrupoRodadas__OverridesType = {
  root?: p.Flex<"div">;
  fetcher?: p.Flex<typeof Fetcher>;
  dateText?: p.Flex<typeof DateText>;
  outcome?: p.Flex<typeof Outcome>;
  score?: p.Flex<typeof Score>;
};

export interface DefaultGrupoRodadasProps {
  currentGroup?: any;
  isFinished?: SingleBooleanChoiceArg<"isFinished">;
  className?: string;
}

function PlasmicGrupoRodadas__RenderFunc(props: {
  variants: PlasmicGrupoRodadas__VariantsArgs;
  args: PlasmicGrupoRodadas__ArgsType;
  overrides: PlasmicGrupoRodadas__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          currentGroup: "A" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "rodada",
        type: "private",
        initFunc: ($props, $state) => 0
      },

      {
        path: "isFinished",
        type: "private",
        initFunc: ($props, $state) => $props["isFinished"]
      }
    ],

    [$props]
  );
  const $state = p.useDollarState(stateSpecs, $props);

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisFinished]: hasVariant($state, "isFinished", "isFinished") }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__dneUk
        )}
      >
        {(() => {
          try {
            return `Grupo ${$props.currentGroup}`;
          } catch (e) {
            if (e instanceof TypeError) {
              return "Enter some text";
            }
            throw e;
          }
        })()}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__nCGh5)}>
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__wIoAj)}>
            {(() => {
              try {
                return $state.rodada !== 0;
              } catch (e) {
                if (e instanceof TypeError) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__m35J6)}
                onClick={(...args) => {
                  const $steps = {};
                  $steps["temp name"] = true
                    ? (({ variable, value }) => {
                        p.set($state, variable, value);
                        return value;
                      }).apply(null, [
                        {
                          variable: "rodada" as const,

                          value: $state.rodada - 1
                        }
                      ])
                    : undefined;
                }}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wWh3E
          )}
        >
          {(() => {
            try {
              return `Rodada ${$state.rodada + 1}`;
            } catch (e) {
              if (e instanceof TypeError) {
                return "Rodada 1";
              }
              throw e;
            }
          })()}
        </div>

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__qEg5O)}>
            {(() => {
              try {
                return $state.rodada !== 2;
              } catch (e) {
                if (e instanceof TypeError) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__wdOyv)}
                onClick={(...args) => {
                  const $steps = {};
                  $steps["temp name"] = true
                    ? (({ variable, value }) => {
                        p.set($state, variable, value);
                        return value;
                      }).apply(null, [
                        {
                          variable: "rodada" as const,

                          value: $state.rodada + 1
                        }
                      ])
                    : undefined;
                }}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}
      </div>

      <Fetcher
        data-plasmic-name={"fetcher"}
        data-plasmic-override={overrides.fetcher}
        className={classNames("__wab_instance", sty.fetcher)}
        endpoint={"match" as const}
        name={"matches" as const}
      >
        <ph.DataCtxReader>
          {$ctx =>
            true
              ? (
                  (() => {
                    try {
                      return $ctx.matches.data
                        .filter(match => match.group === $props.currentGroup)
                        .sort((a, b) => +a.matchday - +b.matchday)
                        .filter((el, currentIndex) =>
                          [$state.rodada * 2, $state.rodada * 2 + 1].includes(
                            currentIndex
                          )
                        );
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentMatch, currentIndex) => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fRBuL)}
                    key={currentIndex}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1V91W
                        )}
                        key={(() => {
                          try {
                            return currentMatch._id;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <DateText
                          data-plasmic-name={"dateText"}
                          data-plasmic-override={overrides.dateText}
                          className={classNames("__wab_instance", sty.dateText)}
                          date={(() => {
                            try {
                              return currentMatch.local_date;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <Outcome
                          data-plasmic-name={"outcome"}
                          data-plasmic-override={overrides.outcome}
                          awayScore={"1" as const}
                          className={classNames("__wab_instance", sty.outcome)}
                          homeScore={"3" as const}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aA0FI
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__hNw0T)}
                            displayHeight={
                              "25px /* plasmic-token: mLJEZEqO4 */" as const
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              "25px /* plasmic-token: mLJEZEqO4 */" as const
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return currentMatch.home_flag;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eyT7P
                            )}
                          >
                            {(() => {
                              try {
                                return currentMatch.home_team_en;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Enter some text";
                                }
                                throw e;
                              }
                            })()}
                          </div>

                          <Score
                            data-plasmic-name={"score"}
                            data-plasmic-override={overrides.score}
                            awayScore={(() => {
                              try {
                                return currentMatch.away_score;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames("__wab_instance", sty.score)}
                            homeScore={(() => {
                              try {
                                return currentMatch.home_score;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            matchId={(() => {
                              try {
                                return currentMatch._id;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            notFinished={currentMatch.finished === "FALSE"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oVmTe
                            )}
                          >
                            {(() => {
                              try {
                                return currentMatch.away_team_en;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Enter some text";
                                }
                                throw e;
                              }
                            })()}
                          </div>

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__dTOvc)}
                            displayHeight={
                              "25px /* plasmic-token: mLJEZEqO4 */" as const
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              "25px /* plasmic-token: mLJEZEqO4 */" as const
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return currentMatch.away_flag;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      </p.Stack>
                    ) : null}
                  </div>
                ))
              : null
          }
        </ph.DataCtxReader>
      </Fetcher>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "fetcher", "dateText", "outcome", "score"],
  fetcher: ["fetcher", "dateText", "outcome", "score"],
  dateText: ["dateText"],
  outcome: ["outcome"],
  score: ["score"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  fetcher: typeof Fetcher;
  dateText: typeof DateText;
  outcome: typeof Outcome;
  score: typeof Score;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGrupoRodadas__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGrupoRodadas__VariantsArgs;
    args?: PlasmicGrupoRodadas__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGrupoRodadas__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGrupoRodadas__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGrupoRodadas__ArgProps,
          internalVariantPropNames: PlasmicGrupoRodadas__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGrupoRodadas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGrupoRodadas";
  } else {
    func.displayName = `PlasmicGrupoRodadas.${nodeName}`;
  }
  return func;
}

export const PlasmicGrupoRodadas = Object.assign(
  // Top-level PlasmicGrupoRodadas renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fetcher: makeNodeComponent("fetcher"),
    dateText: makeNodeComponent("dateText"),
    outcome: makeNodeComponent("outcome"),
    score: makeNodeComponent("score"),

    // Metadata about props expected for PlasmicGrupoRodadas
    internalVariantProps: PlasmicGrupoRodadas__VariantProps,
    internalArgProps: PlasmicGrupoRodadas__ArgProps
  }
);

export default PlasmicGrupoRodadas;
/* prettier-ignore-end */
