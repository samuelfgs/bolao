// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: r6sSLbmSTeVjqGUVythgwH
// Component: Kqr_HwzDFT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: qQe6YhWQiQ/component
import TextInput from "../../TextInput"; // plasmic-import: m1Xqf2MW_yA/component
import Select from "../../Select"; // plasmic-import: Xmjnrrq0VJU/component
import Select__Option from "../../Select__Option"; // plasmic-import: K7dHRkPjzER/component
import { Fetcher } from "../../../pages/plasmic-host"; // plasmic-import: 7dFnQyHCpn/codeComponent
import GrupoRodadas from "../../GrupoRodadas"; // plasmic-import: 5XZgnc_Vja6/component
import { DateText } from "../../../pages/plasmic-host"; // plasmic-import: HbwW1C7Fpl/codeComponent
import Outcome from "../../Outcome"; // plasmic-import: b5zZcZO5NB/component
import Score from "../../Score"; // plasmic-import: IMj4TUj-w8/component
import Button from "../../Button"; // plasmic-import: M9Ku_AMa4YF/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bolao.module.css"; // plasmic-import: r6sSLbmSTeVjqGUVythgwH/projectcss
import sty from "./PlasmicPalpitesComp.module.css"; // plasmic-import: Kqr_HwzDFT/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: XT8KYqZLvm1/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: m7errmFAKi2/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _4_GqcBrJ/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: A1GodbM3-/icon
import SaveIconsvgIcon from "./icons/PlasmicIcon__SaveIconsvg"; // plasmic-import: -d2BCB21Y/icon

export type PlasmicPalpitesComp__VariantMembers = {};

export type PlasmicPalpitesComp__VariantsArgs = {};
type VariantPropType = keyof PlasmicPalpitesComp__VariantsArgs;
export const PlasmicPalpitesComp__VariantProps = new Array<VariantPropType>();

export type PlasmicPalpitesComp__ArgsType = {
  needsSave?: boolean;
  isView?: boolean;
  player?: React.ReactNode;
  artilheiro2?: React.ReactNode;
  fases?: any;
  campeao2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPalpitesComp__ArgsType;
export const PlasmicPalpitesComp__ArgProps = new Array<ArgPropType>(
  "needsSave",
  "isView",
  "player",
  "artilheiro2",
  "fases",
  "campeao2"
);

export type PlasmicPalpitesComp__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  artilheiro?: p.Flex<typeof TextInput>;
  campeao?: p.Flex<typeof Select>;
  fetcher?: p.Flex<typeof Fetcher>;
  grupoRodadas?: p.Flex<typeof GrupoRodadas>;
  save?: p.Flex<typeof Button>;
};

export interface DefaultPalpitesCompProps {
  needsSave?: boolean;
  isView?: boolean;
  player?: React.ReactNode;
  artilheiro2?: React.ReactNode;
  fases?: any;
  campeao2?: React.ReactNode;
  className?: string;
}

function PlasmicPalpitesComp__RenderFunc(props: {
  variants: PlasmicPalpitesComp__VariantsArgs;
  args: PlasmicPalpitesComp__ArgsType;
  overrides: PlasmicPalpitesComp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          needsSave: true,
          isView: false,
          fases: [
            { types: ["group"], title: "Fase de grupos" },
            { types: ["R16"], title: "Oitavas de Final" },
            { types: ["QR"], title: "Quartas de Final" },
            { types: ["semi"], title: "Semi Final" },
            {
              types: ["FIN"],
              title: "Final",
              subtitle: "Disputa de 3º Lugar",
              subtypes: ["3RD"]
            }
          ]
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "rodada",
        type: "private",
        initFunc: ($props, $state, $ctx) => 0
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__wtp0Y)}>
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />
        </div>
      ) : null}
      {(() => {
        try {
          return $props.isView;
        } catch (e) {
          if (e instanceof TypeError) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__bhWi7)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xVcJ
            )}
          >
            {"Palpites: "}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__so7Zu)}>
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.player,
              className: classNames(sty.slotTargetPlayer)
            })}
          </div>
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__zJoe)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b9H
            )}
          >
            {"Artilheiro da Copa"}
          </div>

          <TextInput
            data-plasmic-name={"artilheiro"}
            data-plasmic-override={overrides.artilheiro}
            className={classNames("__wab_instance", sty.artilheiro)}
          />
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__t3K9)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qQbqn
            )}
          >
            {"Artilheiro da Copa:"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__reIn)}>
            {p.renderPlasmicSlot({
              defaultContents: "Nao escolheu",
              value: args.artilheiro2
            })}
          </div>
        </p.Stack>
      ) : null}
      {(() => {
        try {
          return $props.isView;
        } catch (e) {
          if (e instanceof TypeError) {
            return true;
          }
          throw e;
        }
      })() ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fex0O)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__d1W7A
            )}
          >
            {"Palpite do Campeão:"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__dOs4G)}>
            {p.renderPlasmicSlot({
              defaultContents: "Nao escolheu",
              value: args.campeao2
            })}
          </div>
        </p.Stack>
      ) : null}
      {(() => {
        try {
          return !$props.isView;
        } catch (e) {
          if (e instanceof TypeError) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__cBaaz)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bLk1O
            )}
          >
            {"Palpite do Campeão"}
          </div>

          <Select
            data-plasmic-name={"campeao"}
            data-plasmic-override={overrides.campeao}
            className={classNames("__wab_instance", sty.campeao)}
          />
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__euDId)}
        >
          <Fetcher
            data-plasmic-name={"fetcher"}
            data-plasmic-override={overrides.fetcher}
            className={classNames("__wab_instance", sty.fetcher)}
            endpoint={"match" as const}
            name={"matches" as const}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__udDt)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eMXd
                        )}
                      >
                        {(() => {
                          try {
                            return $state.rodada !== 0;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__e64GB
                            )}
                            onClick={async (...args) => {
                              const $steps = {};
                              $steps["temp name"] = true
                                ? (({ variable, value }) => {
                                    p.set($state, variable, value);
                                    return value;
                                  }).apply(null, [
                                    {
                                      variable: "rodada" as const,

                                      value: $state.rodada - 1
                                    }
                                  ])
                                : undefined;
                              if (
                                typeof $steps["temp name"] === "object" &&
                                typeof $steps["temp name"].then === "function"
                              ) {
                                $steps["temp name"] = await $steps["temp name"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n4OXg
                      )}
                    >
                      {$props.fases[$state.rodada].title}
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e1XFm
                        )}
                      >
                        {(() => {
                          try {
                            return $state.rodada !== $props.fases.length - 1;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sowW
                            )}
                            onClick={async (...args) => {
                              const $steps = {};
                              $steps["temp name"] = true
                                ? (({ variable, value }) => {
                                    p.set($state, variable, value);
                                    return value;
                                  }).apply(null, [
                                    {
                                      variable: "rodada" as const,

                                      value: $state.rodada + 1
                                    }
                                  ])
                                : undefined;
                              if (
                                typeof $steps["temp name"] === "object" &&
                                typeof $steps["temp name"].then === "function"
                              ) {
                                $steps["temp name"] = await $steps["temp name"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    ) : null}
                  </div>

                  {(() => {
                    try {
                      return $state.rodada === 0;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (
                        (() => {
                          try {
                            return [...Array(8).keys()].map(k =>
                              String.fromCharCode("A".charCodeAt(0) + k)
                            );
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return [];
                            }
                            throw e;
                          }
                        })() ?? []
                      ).map((currentGroup, currentIndex) => (
                        <GrupoRodadas
                          data-plasmic-name={"grupoRodadas"}
                          data-plasmic-override={overrides.grupoRodadas}
                          className={classNames(
                            "__wab_instance",
                            sty.grupoRodadas
                          )}
                          currentGroup={currentGroup}
                          key={currentIndex}
                        />
                      ))
                    : null}
                  {(() => {
                    try {
                      return $state.rodada;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (
                        (() => {
                          try {
                            return $ctx.matches.data.filter(match =>
                              $props.fases[$state.rodada].types.includes(
                                match.type
                              )
                            );
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return [];
                            }
                            throw e;
                          }
                        })() ?? []
                      ).map((currentMatch, currentIndex) => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mz4Pc
                          )}
                          key={currentIndex}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__syjNx
                              )}
                            >
                              <DateText
                                className={classNames(
                                  "__wab_instance",
                                  sty.dateText__pA3Wg
                                )}
                                date={(() => {
                                  try {
                                    return currentMatch.local_date;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              {(() => {
                                try {
                                  return (() => {
                                    const matchDate = new Date(
                                      `${currentMatch.local_date} +3`
                                    );
                                    const localDate = new Date(Date.now());
                                    return matchDate < localDate;
                                  })();
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Outcome
                                  className={classNames(
                                    "__wab_instance",
                                    sty.outcome__aliO
                                  )}
                                />
                              ) : null}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___178Ic
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__wm0Dz)}
                                  displayHeight={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"none" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  loading={"lazy" as const}
                                  src={(() => {
                                    try {
                                      return currentMatch.home_flag;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fg6Ec
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentMatch.home_team_en;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>

                                <Score
                                  awayScore={"-1" as const}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.score__r0Q2I
                                  )}
                                  homeScore={"-1" as const}
                                  isOpen={(() => {
                                    const date2 = new Date(
                                      `${currentMatch.local_date} +3`
                                    );
                                    const date = new Date(Date.now());
                                    return date < date2;
                                  })()}
                                  matchId={(() => {
                                    try {
                                      return currentMatch._id;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oKZy6
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentMatch.away_team_en;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>

                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__rXgTz)}
                                  displayHeight={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  loading={"lazy" as const}
                                  src={(() => {
                                    try {
                                      return currentMatch.away_flag;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      ))
                    : null}
                  {(() => {
                    try {
                      return $props.fases[$state.rodada].subtitle !== undefined;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yfnTy)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4Nm7I
                          )}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b8Kwh
                        )}
                      >
                        {$props.fases[$state.rodada].subtitle}
                      </div>

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lqaF
                          )}
                        />
                      ) : null}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.rodada;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (
                        (() => {
                          try {
                            return $ctx.matches.data.filter(match =>
                              $props.fases[$state.rodada].subtypes.includes(
                                match.type
                              )
                            );
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return [];
                            }
                            throw e;
                          }
                        })() ?? []
                      ).map((currentMatch, currentIndex) => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qlD6O
                          )}
                          key={currentIndex}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__w12NQ
                              )}
                            >
                              <DateText
                                className={classNames(
                                  "__wab_instance",
                                  sty.dateText__nlEq
                                )}
                                date={(() => {
                                  try {
                                    return currentMatch.local_date;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              {(() => {
                                try {
                                  return (() => {
                                    const matchDate = new Date(
                                      `${currentMatch.local_date} +3`
                                    );
                                    const localDate = new Date(Date.now());
                                    return matchDate < localDate;
                                  })();
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Outcome
                                  className={classNames(
                                    "__wab_instance",
                                    sty.outcome__jjDfL
                                  )}
                                />
                              ) : null}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9J8Kg
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__icM)}
                                  displayHeight={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"none" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  loading={"lazy" as const}
                                  src={(() => {
                                    try {
                                      return currentMatch.home_flag;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ol60R
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentMatch.home_team_en;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>

                                <Score
                                  awayScore={"-1" as const}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.score__oYete
                                  )}
                                  homeScore={"-1" as const}
                                  isOpen={(() => {
                                    const date2 = new Date(
                                      `${currentMatch.local_date} +3`
                                    );
                                    const date = new Date(Date.now());
                                    return date < date2;
                                  })()}
                                  matchId={(() => {
                                    try {
                                      return currentMatch._id;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xty7
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentMatch.away_team_en;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>

                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__b0Dan)}
                                  displayHeight={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={
                                    "25px /* plasmic-token: mLJEZEqO4 */" as const
                                  }
                                  loading={"lazy" as const}
                                  src={(() => {
                                    try {
                                      return currentMatch.away_flag;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      ))
                    : null}
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </Fetcher>
        </p.Stack>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox___2UmF)} />

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__cb4Qb)}>
          {(() => {
            try {
              return $props.needsSave;
            } catch (e) {
              if (e instanceof TypeError) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              data-plasmic-name={"save"}
              data-plasmic-override={overrides.save}
              className={classNames("__wab_instance", sty.save)}
              endIcon={
                <SaveIconsvgIcon
                  className={classNames(projectcss.all, sty.svg__ulC9E)}
                  role={"img"}
                />
              }
              showEndIcon={true}
            >
              {"Salvar"}
            </Button>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "artilheiro",
    "campeao",
    "fetcher",
    "grupoRodadas",
    "save"
  ],
  header: ["header"],
  artilheiro: ["artilheiro"],
  campeao: ["campeao"],
  fetcher: ["fetcher", "grupoRodadas"],
  grupoRodadas: ["grupoRodadas"],
  save: ["save"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  artilheiro: typeof TextInput;
  campeao: typeof Select;
  fetcher: typeof Fetcher;
  grupoRodadas: typeof GrupoRodadas;
  save: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPalpitesComp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPalpitesComp__VariantsArgs;
    args?: PlasmicPalpitesComp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPalpitesComp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPalpitesComp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPalpitesComp__ArgProps,
          internalVariantPropNames: PlasmicPalpitesComp__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPalpitesComp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPalpitesComp";
  } else {
    func.displayName = `PlasmicPalpitesComp.${nodeName}`;
  }
  return func;
}

export const PlasmicPalpitesComp = Object.assign(
  // Top-level PlasmicPalpitesComp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    artilheiro: makeNodeComponent("artilheiro"),
    campeao: makeNodeComponent("campeao"),
    fetcher: makeNodeComponent("fetcher"),
    grupoRodadas: makeNodeComponent("grupoRodadas"),
    save: makeNodeComponent("save"),

    // Metadata about props expected for PlasmicPalpitesComp
    internalVariantProps: PlasmicPalpitesComp__VariantProps,
    internalArgProps: PlasmicPalpitesComp__ArgProps
  }
);

export default PlasmicPalpitesComp;
/* prettier-ignore-end */
